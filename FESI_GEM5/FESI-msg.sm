/**
 * This file contains a simple example FESI protocol.
 *
 * The protocol in this file is based off of the FESI protocol originally designed by me.
 *
 * Author: Rishabh Chitoor
 */

enumeration(CoherenceRequestType, desc="Types of request messages") {
    // "Requests" from the Caches to the directory
    GetS,       desc="Request from cache for a block with read permission";
    GetM,       desc="Request from cache for a block with write permission";
    PutS,       desc="Sent to directory when evicting a block in S (clean WB)";
    PutE,       desc="Sent to directory when evicting a block in E (clean WB)";
    PutF,	desc="Sent to directory when evicting a block in F";

    // "Requests" from the directory to the caches on the fwd network
    Inv,        desc="Probe the cache and invalidate any matching blocks";
    PutAck,     desc="The put request has been processed."; 
			// PutAck is on fwd network to avoid deadlocks

    // "Requests" from the directory to allocate new F on the fwd network
    FAllocReq,	desc="Request the sharers to take up the F tag";
    AllocF,	desc="Command the specific sharer to allocate as F";
}

enumeration(CoherenceResponseType, desc="Types of response messages") {
    Data,       	desc="Contains the most up-to-date data";
    ExclusiveData,	desc="Contains Exclusive Data from the dir";
    InvAck,     	desc="Message from another cache that they have inv. the blk";
    AckCount,		desc="The Acks needed for F to F transfer";

    // "Responses" from the Cache while allocating new F among sharers
    StoFAck,		desc="Sharer is ready to take up F tag";
    StoFInvAck,		desc="Sharer cannot take up F";
    SFDone,		desc="Ack that S to F is done";
}

structure(RequestMsg, desc="Used for Cache->Dir and Fwd messages",
          interface="Message") {
    // NOTE: You can't name addr "Addr" because it would conflict with the
    // Addr *type*.
    Addr addr,                   desc="Physical address for this request";
    CoherenceRequestType Type,   desc="Type of request";
    MachineID Requestor,         desc="Node who initiated the request";
    NetDest Destination,         desc="Multicast destination mask";
    DataBlock DataBlk,           desc="data for the cache line";
    // NOTE: You *must* use MessageSize as the name of this variable, and it's
    // required that you have a MessageSize for each type of message. You will
    // the the error "panic: MessageSizeType() called on wrong message!"
    MessageSizeType MessageSize, desc="size category of the message";
    int Acks,                    desc="Number of acks required from others";

    // This must be overridden here to support functional accesses
    bool functionalRead(Packet *pkt) {
        // Requests should never have the only copy of the most up-to-date data
        return false;
    }

    bool functionalWrite(Packet *pkt) {
        // No check on message type required since the protocol should read
        // data block from only those messages that contain valid data
        return testAndWrite(addr, DataBlk, pkt);
    }
}

structure(ResponseMsg, desc="Used for Cache->Dir and Fwd messages",
          interface="Message") {
    Addr addr,                   desc="Physical address for this response";
    CoherenceResponseType Type,  desc="Type of response";
    MachineID Sender,            desc="Node who is responding to the request";
    NetDest Destination,         desc="Multicast destination mask";
    DataBlock DataBlk,           desc="data for the cache line";
    MessageSizeType MessageSize, desc="size category of the message";
    int Acks,                    desc="Number of acks required from others";

    // This must be overridden here to support functional accesses
    bool functionalRead(Packet *pkt) {
        if (Type == CoherenceResponseType:Data) {
            return testAndRead(addr, DataBlk, pkt);
        }
        return false;
    }

    bool functionalWrite(Packet *pkt) {
        // No check on message type required since the protocol should read
        // data block from only those messages that contain valid data
        return testAndWrite(addr, DataBlk, pkt);
    }
}
